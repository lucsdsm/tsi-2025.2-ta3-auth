"""
Models para o sistema de gerenciamento de Pets

Hierarquia:
- TipoAnimal (Ex: Cachorro, Gato, P√°ssaro)
  ‚îî‚îÄ‚îÄ Raca (Ex: Labrador, Persa, Can√°rio)
      ‚îî‚îÄ‚îÄ Animal (Pet individual com propriet√°rio)

Relacionamentos:
- Um Animal pertence a UM propriet√°rio (User) - ForeignKey
- Um User pode ter V√ÅRIOS animais - reverse relationship
- Uma Ra√ßa pertence a UM TipoAnimal
- Um Animal pertence a UMA Ra√ßa
"""

from django.db import models
from django.conf import settings


class TipoAnimal(models.Model):
    """
    Tipo/Esp√©cie de animal (Cachorro, Gato, etc)
    """
    nome = models.CharField(
        max_length=50,
        unique=True,
        help_text="Nome do tipo de animal (ex: Cachorro, Gato, P√°ssaro)"
    )
    icone = models.CharField(
        max_length=50,
        blank=True,
        help_text="Emoji ou √≠cone representando o tipo (ex: üê∂, üê±, üê¶)"
    )
    ativo = models.BooleanField(
        default=True,
        help_text="Define se este tipo est√° ativo no sistema"
    )
    criado_em = models.DateTimeField(auto_now_add=True)
    atualizado_em = models.DateTimeField(auto_now=True)

    class Meta:
        verbose_name = "Tipo de Animal"
        verbose_name_plural = "Tipos de Animais"
        ordering = ['nome']

    def __str__(self):
        return f"{self.icone} {self.nome}" if self.icone else self.nome


class Raca(models.Model):
    """
    Ra√ßa de um tipo espec√≠fico de animal
    """
    tipo_animal = models.ForeignKey(
        TipoAnimal,
        on_delete=models.PROTECT,
        related_name='racas',
        help_text="Tipo de animal ao qual esta ra√ßa pertence"
    )
    nome = models.CharField(
        max_length=100,
        help_text="Nome da ra√ßa (ex: Labrador, Persa, Can√°rio)"
    )
    observacoes_manejo = models.TextField(
        blank=True,
        help_text="Observa√ß√µes sobre cuidados e manejo espec√≠ficos desta ra√ßa"
    )
    ativo = models.BooleanField(
        default=True,
        help_text="Define se esta ra√ßa est√° ativa no sistema"
    )
    criado_em = models.DateTimeField(auto_now_add=True)
    atualizado_em = models.DateTimeField(auto_now=True)

    class Meta:
        verbose_name = "Ra√ßa"
        verbose_name_plural = "Ra√ßas"
        ordering = ['tipo_animal', 'nome']
        unique_together = ['tipo_animal', 'nome']  # Evita ra√ßa duplicada para mesmo tipo

    def __str__(self):
        return f"{self.nome} ({self.tipo_animal.nome})"


class Animal(models.Model):
    """
    Animal (Pet) individual com propriet√°rio
    
    Relacionamento: Cada animal pertence a UM usu√°rio
    """
    SEXO_CHOICES = [
        ('M', 'Macho'),
        ('F', 'F√™mea'),
        ('I', 'Indefinido'),
    ]

    # Relacionamento com o usu√°rio propriet√°rio
    proprietario = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        related_name='animais',
        help_text="Usu√°rio propriet√°rio do animal"
    )
    
    # Dados do animal
    nome = models.CharField(
        max_length=100,
        help_text="Nome do pet"
    )
    tipo_animal = models.ForeignKey(
        TipoAnimal,
        on_delete=models.PROTECT,
        related_name='animais',
        help_text="Tipo do animal"
    )
    raca = models.ForeignKey(
        Raca,
        on_delete=models.PROTECT,
        related_name='animais',
        help_text="Ra√ßa do animal"
    )
    sexo = models.CharField(
        max_length=1,
        choices=SEXO_CHOICES,
        default='I',
        help_text="Sexo do animal"
    )
    data_nascimento = models.DateField(
        null=True,
        blank=True,
        help_text="Data de nascimento do animal"
    )
    
    # Campos de controle
    ativo = models.BooleanField(
        default=True,
        help_text="Define se este animal est√° ativo no sistema"
    )
    criado_em = models.DateTimeField(auto_now_add=True)
    atualizado_em = models.DateTimeField(auto_now=True)
    
    # Campos opcionais adicionais
    observacoes = models.TextField(
        blank=True,
        help_text="Observa√ß√µes gerais sobre o animal"
    )
    # foto = models.ImageField(
    #     upload_to='animais/',
    #     blank=True,
    #     null=True,
    #     help_text="Foto do animal"
    # )

    class Meta:
        verbose_name = "Animal"
        verbose_name_plural = "Animais"
        ordering = ['-criado_em']  # Mais recentes primeiro
        # Um usu√°rio n√£o pode ter dois animais com o mesmo nome
        unique_together = ['proprietario', 'nome']

    def __str__(self):
        return f"{self.nome} ({self.raca.nome}) - {self.proprietario.username}"
    
    @property
    def idade_anos(self):
        from datetime import date

        if self.data_nascimento:
            hoje = date.today()
            return (
                hoje.year
                - self.data_nascimento.year
                - (
                    (hoje.month, hoje.day)
                    < (self.data_nascimento.month, self.data_nascimento.day)
                )
            )
        return None

    def get_sexo_display_icon(self):
        """Retorna o √≠cone do sexo do animal"""
        if self.sexo == "M":
            return "‚ôÇÔ∏è"
        elif self.sexo == "F":
            return "‚ôÄÔ∏è"
        return ""
    
    def get_sexo_display_icon(self):
        """Retorna √≠cone para o sexo"""
        icons = {
            'M': '‚ôÇÔ∏è',
            'F': '‚ôÄÔ∏è',
            'I': '‚ö™',
        }
        return icons.get(self.sexo, '')
