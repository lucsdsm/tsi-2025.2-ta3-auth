"""
Management command para inicializar dados de pets
Popula tipos de animais e ra√ßas
"""

from django.core.management.base import BaseCommand
from pets.models import TipoAnimal, Raca


class Command(BaseCommand):
    help = 'Inicializa dados de pets: tipos de animais e ra√ßas'

    def handle(self, *args, **options):
        self.stdout.write(self.style.WARNING('ÔøΩ Inicializando dados de pets...'))
        
        # 1. Criar tipos de animais
        tipos = self.create_tipos_animais()
        
        # 2. Criar ra√ßas
        self.create_racas(tipos)
        
        self.stdout.write(self.style.SUCCESS('‚úÖ Pets configurados!'))

    def create_tipos_animais(self):
        """Cria tipos de animais padr√£o"""
        self.stdout.write('  üì¶ Criando tipos de animais...')
        
        tipos_data = [
            {'nome': 'Cachorro', 'icone': 'üêï'},
            {'nome': 'Gato', 'icone': 'üêà'},
            {'nome': 'P√°ssaro', 'icone': 'üê¶'},
            {'nome': 'Coelho', 'icone': 'üê∞'},
            {'nome': 'Hamster', 'icone': 'üêπ'},
            {'nome': 'Peixe', 'icone': 'üê†'},
        ]
        
        tipos = {}
        for tipo_data in tipos_data:
            tipo, created = TipoAnimal.objects.get_or_create(
                nome=tipo_data['nome'],
                defaults={'icone': tipo_data['icone']}
            )
            tipos[tipo_data['nome']] = tipo
            
            if created:
                self.stdout.write(f'     ‚úÖ {tipo_data["icone"]} {tipo_data["nome"]}')
            else:
                self.stdout.write(f'     ‚ö†Ô∏è  {tipo_data["icone"]} {tipo_data["nome"]} (j√° existe)')
        
        return tipos

    def create_racas(self, tipos):
        """Cria ra√ßas padr√£o para cada tipo de animal"""
        self.stdout.write('  üì¶ Criando ra√ßas...')
        
        racas_data = {
            'Cachorro': [
                'Labrador',
                'Poodle',
                'Golden Retriever',
                'Bulldog',
                'Pastor Alem√£o',
                'Beagle',
                'Pug',
                'Chihuahua',
                'Shih Tzu',
                'Vira-lata',
            ],
            'Gato': [
                'Persa',
                'Siam√™s',
                'Maine Coon',
                'Bengal',
                'Sphynx',
                'British Shorthair',
                'Ragdoll',
                'Angor√°',
                'Vira-lata',
            ],
            'P√°ssaro': [
                'Calopsita',
                'Papagaio',
                'Periquito',
                'Can√°rio',
                'Agapornis',
                'Cacatua',
                'Arara',
            ],
            'Coelho': [
                'An√£o',
                'Mini Rex',
                'Lion Head',
                'Californiano',
                'Fuzzy Lop',
                'Holand√™s',
            ],
            'Hamster': [
                'S√≠rio',
                'Chin√™s',
                'An√£o Russo',
                'Roborovski',
            ],
            'Peixe': [
                'Betta',
                'Guppy',
                'Neon',
                'Molin√©sia',
                'Platy',
                'Kinguio',
            ],
        }
        
        total_created = 0
        total_existing = 0
        
        for tipo_nome, racas_list in racas_data.items():
            if tipo_nome not in tipos:
                continue
                
            tipo = tipos[tipo_nome]
            
            for raca_nome in racas_list:
                _, created = Raca.objects.get_or_create(
                    nome=raca_nome,
                    tipo_animal=tipo
                )
                
                if created:
                    total_created += 1
                else:
                    total_existing += 1
        
        self.stdout.write(f'     ‚úÖ {total_created} ra√ßas criadas')
        if total_existing > 0:
            self.stdout.write(f'     ‚ö†Ô∏è  {total_existing} ra√ßas j√° existiam')
